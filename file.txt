import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

void main() {
  runApp(const CoffeeExplorerApp());
}

class CoffeeExplorerApp extends StatelessWidget {
  const CoffeeExplorerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Coffee Explorer',
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.brown),
        textTheme: Typography.material2021().black,
      ),
      home: const LoginPage(),
    );
  }
}

// Dummy global review list
final List<Map<String, String>> globalReviews = [
  {'name': 'Alice', 'rating': '5', 'recommend': 'Yes', 'content': 'Amazing coffee and great vibe!'},
  {'name': 'Bob', 'rating': '4', 'recommend': 'No', 'content': 'Nice place, but a bit noisy.'},
];


class LoginPage extends StatelessWidget {
  const LoginPage({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = GoogleFonts.poppinsTextTheme(theme.textTheme);

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 32.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const CircleAvatar(
                radius: 40,
                backgroundColor: Colors.brown,
                child: Icon(Icons.coffee, color: Colors.white, size: 36),
              ),
              const SizedBox(height: 24),
              Text(
                'Coffee Explorer',
                style: textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: Colors.brown.shade800,
                ),
              ),
              const SizedBox(height: 32),
              Card(
                elevation: 6,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 24.0,
                    vertical: 32.0,
                  ),
                  child: Column(
                    children: [
                      TextField(
                        decoration: InputDecoration(
                          labelText: 'Email',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          prefixIcon: const Icon(Icons.email),
                        ),
                      ),
                      const SizedBox(height: 20),
                      TextField(
                        obscureText: true,
                        decoration: InputDecoration(
                          labelText: 'Password',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          prefixIcon: const Icon(Icons.lock),
                        ),
                      ),
                      const SizedBox(height: 12),
                      Align(
                        alignment: Alignment.centerRight,
                        child: TextButton(
                          onPressed: () {},
                          child: const Text('Forgot Password?'),
                        ),
                      ),
                      const SizedBox(height: 24),
                      SizedBox(
                        width: double.infinity,
                        height: 48,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.brown,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          onPressed: () {
                            Navigator.pushReplacement(
                              context,
                              MaterialPageRoute(
                                builder: (_) => const HomePage(),
                              ),
                            );
                          },
                          child: const Text(
                            'Login',
                            style: TextStyle(
                              fontSize: 16,
                              color: Colors.white,
                              fontWeight: FontWeight.w600),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = GoogleFonts.poppinsTextTheme(theme.textTheme);

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      appBar: AppBar(
        title: Text('Coffee Explorer', style: textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold)),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            tooltip: 'Logout',
            onPressed: () => Navigator.pushAndRemoveUntil(
              context,
              MaterialPageRoute(builder: (_) => const LoginPage()),
              (route) => false,
            ),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: GridView.count(
          crossAxisCount: 2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          children: [
            _HomeCard(
              title: 'Search Shops',
              icon: Icons.search,
              onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => const SearchPage())),
            ),
            _HomeCard(
              title: 'Submit Review',
              icon: Icons.rate_review,
              onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => const SubmitReviewPage())),
            ),
            _HomeCard(
              title: 'Recent Reviews',
              icon: Icons.comment,
              onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => const ReviewsPage())),
            ),
            _HomeCard(
              title: 'Brewing Tips',
              icon: Icons.local_cafe,
              onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => const TipsPage())),
            ),
          ],
        ),
      ),
    );
  }
}

class _HomeCard extends StatelessWidget {
  final String title;
  final IconData icon;
  final VoidCallback onTap;

  const _HomeCard({
    required this.title,
    required this.icon,
    required this.onTap,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = GoogleFonts.poppinsTextTheme(theme.textTheme);

    return Card(
      elevation: 6,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 40, color: Colors.brown.shade700),
              const SizedBox(height: 16),
              Text(
                title,
                style: textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w600),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SearchPage extends StatefulWidget {
  const SearchPage({super.key});

  @override
  State<SearchPage> createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  final List<Map<String, dynamic>> allShops = [
    {
      'name': 'Brew Haven',
      'tags': ['wifi', 'outdoors'],
      'desc': 'Chic and comfy',
      'hours': '8am - 8pm',
      'menu': ['Cappuccino', 'Cold Brew', 'Pastries']
    },
    {
      'name': 'Latte Land',
      'tags': ['quiet'],
      'desc': 'Perfect for remote work',
      'hours': '7am - 6pm',
      'menu': ['Latte', 'Espresso', 'Avocado Toast']
    },
    {
      'name': 'Espresso Express',
      'tags': ['wifi'],
      'desc': 'Fast service and good coffee',
      'hours': '6am - 4pm',
      'menu': ['Espresso', 'Americano', 'Bagels']
    },
    {
      'name': 'Café Zen',
      'tags': ['outdoors', 'quiet'],
      'desc': 'Tranquil atmosphere',
      'hours': '9am - 9pm',
      'menu': ['Herbal Tea', 'Pour Over', 'Croissants']
    },
    {
      'name': 'Grind & Go',
      'tags': ['wifi', 'pet-friendly'],
      'desc': 'Grab-and-go with outdoor pet space',
      'hours': '5am - 3pm',
      'menu': ['Iced Latte', 'Bagels', 'Protein Bites']
    },
    {
      'name': 'Roast Ritual',
      'tags': ['vegan-options', 'indoor-plants'],
      'desc': 'Green café with vegan treats',
      'hours': '9am - 6pm',
      'menu': ['Pour Over', 'Vegan Brownie', 'Matcha Latte']
    },
    {
      'name': 'Drip & Draft',
      'tags': ['live-music', 'evening'],
      'desc': 'Coffee by day, music by night',
      'hours': '10am - 10pm',
      'menu': ['Nitro Cold Brew', 'Muffins', 'Craft Beer']
    },
    {
      'name': 'Caffeine Alley',
      'tags': ['24-hours', 'study-friendly'],
      'desc': 'Open all night for students',
      'hours': 'Open 24 hours',
      'menu': ['Drip Coffee', 'Toasties', 'Energy Bars']
    },
    {
      'name': 'Bean Scene',
      'tags': ['kid-friendly', 'colorful'],
      'desc': 'Playful and family-friendly',
      'hours': '8am - 6pm',
      'menu': ['Hot Chocolate', 'Cinnamon Roll', 'Decaf Espresso']
    },
    {
      'name': 'The Roastery',
      'tags': ['local-roast', 'industrial'],
      'desc': 'Bold blends in a rustic space',
      'hours': '7am - 5pm',
      'menu': ['Espresso Flight', 'Cold Brew', 'Banana Bread']
    },
  ];

  final Set<String> selectedTags = {};
  String query = '';

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = GoogleFonts.poppinsTextTheme(theme.textTheme);

    // Extract all unique tags from allShops for the filter chips
    final allTags = {
      for (final shop in allShops) ...shop['tags'] as List<String>
    }.toList()
      ..sort();

    final filtered = allShops.where((shop) {
      final matchesText = shop['name'].toLowerCase().contains(query.toLowerCase()) ||
          shop['desc'].toLowerCase().contains(query.toLowerCase());
      final matchesTags = selectedTags.isEmpty ||
          selectedTags.every((tag) => shop['tags'].contains(tag));
      return matchesText && matchesTags;
    }).toList();

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      appBar: AppBar(title: Text('Search Coffee Shops', style: textTheme.titleLarge)),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: 'Search',
                prefixIcon: const Icon(Icons.search),
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              ),
              onChanged: (value) => setState(() => query = value),
            ),
            const SizedBox(height: 12),
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: Row(
                children: allTags.map((tag) {
                  return Padding(
                    padding: const EdgeInsets.only(right: 8.0),
                    child: FilterChip(
                      label: Text(tag),
                      selected: selectedTags.contains(tag),
                      onSelected: (sel) {
                        setState(() {
                          sel ? selectedTags.add(tag) : selectedTags.remove(tag);
                        });
                      },
                    ),
                  );
                }).toList(),
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: ListView.builder(
                itemCount: filtered.length,
                itemBuilder: (_, i) => Card(
                  elevation: 4,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: ListTile(
                    contentPadding: const EdgeInsets.all(16),
                    leading: const Icon(Icons.local_cafe, size: 32, color: Colors.brown),
                    title: Text(filtered[i]['name'], style: textTheme.titleMedium),
                    subtitle: Text(filtered[i]['desc']),
                    onTap: () => Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (_) => CoffeeShopDetailPage(shop: filtered[i]),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class CoffeeShopDetailPage extends StatelessWidget {
  final Map<String, dynamic> shop;

  const CoffeeShopDetailPage({super.key, required this.shop});

  @override
  Widget build(BuildContext context) {
    final textTheme = GoogleFonts.poppinsTextTheme(Theme.of(context).textTheme);

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      appBar: AppBar(title: Text(shop['name'], style: textTheme.titleLarge)),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Card(
          elevation: 6,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(shop['desc'], style: textTheme.titleMedium),
                const SizedBox(height: 16),
                Wrap(
                  spacing: 8,
                  children: (shop['tags'] as List<String>)
                      .map((tag) => Chip(label: Text(tag)))
                      .toList(),
                ),
                const SizedBox(height: 24),
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  leading: const Icon(Icons.access_time, color: Colors.brown),
                  title: const Text('Hours'),
                  subtitle: Text(shop['hours']),
                ),
                const Divider(),
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  leading: const Icon(Icons.menu_book, color: Colors.brown),
                  title: const Text('Popular Menu'),
                  subtitle: Text((shop['menu'] as List<String>).join(', ')),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class SubmitReviewPage extends StatefulWidget {
  const SubmitReviewPage({super.key});

  @override
  State<SubmitReviewPage> createState() => _SubmitReviewPageState();
}

class _SubmitReviewPageState extends State<SubmitReviewPage> {
  final _formKey = GlobalKey<FormState>();
  String name = '';
  String rating = '5';
  bool recommend = false;
  String content = '';

  @override
  Widget build(BuildContext context) {
    final textTheme = GoogleFonts.poppinsTextTheme(Theme.of(context).textTheme);

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      appBar: AppBar(title: Text('Submit Review', style: textTheme.titleLarge)),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Card(
          elevation: 6,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Form(
              key: _formKey,
              child: ListView(children: [
                TextFormField(
                  decoration: const InputDecoration(labelText: 'Your Name'),
                  onSaved: (v) => name = v ?? '',
                  validator: (v) => v == null || v.isEmpty ? 'Enter your name' : null,
                ),
                const SizedBox(height: 12),
                DropdownButtonFormField<String>(
                  value: rating,
                  decoration: const InputDecoration(labelText: 'Rating'),
                  items: ['5', '4', '3', '2', '1']
                      .map((r) => DropdownMenuItem(value: r, child: Text(r)))
                      .toList(),
                  onChanged: (v) => setState(() => rating = v ?? '5'),
                ),
                const SizedBox(height: 12),
                TextFormField(
                  decoration: const InputDecoration(labelText: 'Your Review'),
                  maxLines: 3,
                  onSaved: (v) => content = v ?? '',
                ),
                const SizedBox(height: 12),
                CheckboxListTile(
                  title: const Text('Would Recommend'),
                  value: recommend,
                  onChanged: (v) => setState(() => recommend = v ?? false),
                ),
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  height: 48,
                  child: FilledButton(
                    onPressed: () {
                      if (_formKey.currentState?.validate() ?? false) {
                        _formKey.currentState?.save();
                        globalReviews.insert(0, {
                          'name': name,
                          'rating': rating,
                          'recommend': recommend ? 'Yes' : 'No',
                          'content': content
                        });
                        Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(builder: (_) => const ReviewsPage()),
                        );
                      }
                    },
                    child: const Text('Submit'),
                  ),
                ),
              ]),
            ),
          ),
        ),
      ),
    );
  }
}

class ReviewsPage extends StatelessWidget {
  const ReviewsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final textTheme = GoogleFonts.poppinsTextTheme(Theme.of(context).textTheme);

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      appBar: AppBar(title: Text('Recent Reviews', style: textTheme.titleLarge)),
      body: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: globalReviews.length,
        separatorBuilder: (_, __) => const SizedBox(height: 12),
        itemBuilder: (_, i) {
          final r = globalReviews[i];
          return Card(
            elevation: 4,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            child: ListTile(
              leading: const CircleAvatar(
                backgroundColor: Colors.brown,
                child: Icon(Icons.person, color: Colors.white),
              ),
              title: Text('${r['name']} (${r['rating']}⭐)', style: textTheme.titleSmall),
              subtitle: Text('${r['content']}\nRecommend: ${r['recommend']}'),
              isThreeLine: true,
            ),
          );
        },
      ),
    );
  }
}

class TipsPage extends StatelessWidget {
  const TipsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final tips = [
      'Use fresh beans for better flavor.',
      'Grind size matters — match it to your method.',
      'Use filtered water at 195–205°F.',
      'Don’t skimp on cleaning your gear.',
    ];

    final textTheme = GoogleFonts.poppinsTextTheme(Theme.of(context).textTheme);

    return Scaffold(
      backgroundColor: Colors.brown.shade50,
      appBar: AppBar(title: Text('Brewing Tips', style: textTheme.titleLarge)),
      body: PageView.builder(
        itemCount: tips.length,
        controller: PageController(viewportFraction: 0.9),
        itemBuilder: (_, i) => Padding(
          padding: const EdgeInsets.symmetric(vertical: 24.0, horizontal: 8.0),
          child: Card(
            elevation: 6,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
            child: Center(
              child: Padding(
                padding: const EdgeInsets.all(24.0),
                child: Text(
                  tips[i],
                  style: textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.w500),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
